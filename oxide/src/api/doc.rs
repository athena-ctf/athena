use utoipa::openapi::security::{Http, HttpAuthScheme, SecurityScheme};
use utoipa::{Modify, OpenApi};

use crate::docker::StrippedCompose;
use crate::handlers::{
    achievement, auth, ban, challenge, file, flag, hint, instance, invite, notification, player,
    stats, tag, team,
};
use crate::schemas::{
    AchievementDetails, AchievementModel, BackendEnum, BanDetails, BanModel, ChallengeDetails,
    ChallengeHint, ChallengeModel, ChallengeRelations, ChallengeSolves, ChallengeStatusEnum,
    ContainerMeta, CreateChallengeSchema, DifficultyEnum, ErrorModel, FileDetails, FileModel,
    FlagDetails, FlagModel, FlagTypeEnum, FlagVerificationResult, HintDetails, HintModel,
    InstanceDetails, InstanceModel, InviteDetails, InviteModel, JsonResponse, LoginModel,
    NotificationDetails, NotificationModel, PlayerDetails, PlayerModel, PlayerProfile,
    RegisterPlayer, ResetPasswordSchema, RoleEnum, SendTokenSchema, StatSchema, SubmissionDetails,
    SubmissionModel, TagDetails, TagModel, TagSolves, TeamDetails, TeamModel, TokenPair,
    UpdateProfileSchema, UploadedFile, VerifyFlagSchema, VerifySchema,
};

#[derive(OpenApi)]
#[openapi(
    info(
        contact(
            email = "athena.help@gmail.com",
            name = "AthenaCTF Team"
        ),
        description = include_str!("../../README.md"),
        license(
            name = "MIT",
            url = "https://www.mit.edu/~amini/LICENSE.md"
        ),
        title = "Athena CTF",
        version = "0.1.0"
    ),
    paths(
        achievement::create,
        achievement::delete,
        achievement::list,
        achievement::retrieve_by_id,
        achievement::retrieve_challenge_by_id,
        achievement::retrieve_player_by_id,
        achievement::update_by_id,
        auth::get_me,
        auth::register::action,
        auth::register::send_token,
        auth::reset_password::action,
        auth::reset_password::send_token,
        auth::token::create,
        auth::token::refresh,
        ban::add_player_by_id,
        ban::add_team_by_id,
        ban::create,
        ban::delete_by_id,
        ban::list,
        ban::retrieve_by_id,
        ban::retrieve_player_by_id,
        ban::retrieve_team_by_id,
        ban::update_by_id,
        challenge::calculate_solves_by_id,
        challenge::create,
        challenge::delete_by_id,
        challenge::list_achievements_by_id,
        challenge::list_files_by_id,
        challenge::list_hints_by_id,
        challenge::list_instances_by_id,
        challenge::list_tags_by_id,
        challenge::list,
        challenge::retrieve_by_id,
        challenge::retrieve_relations_by_id,
        challenge::update_by_id,
        file::create,
        file::delete_by_id,
        file::upload,
        file::list,
        file::retrieve_by_id,
        file::retrieve_challenge_by_id,
        file::update_by_id,
        flag::create,
        flag::delete_by_id,
        flag::list,
        flag::retrieve_by_id,
        flag::retrieve_challenge_by_id,
        flag::retrieve_player_by_id,
        flag::update_by_id,
        flag::verify,
        hint::create,
        hint::delete_by_id,
        hint::list,
        hint::retrieve_by_id,
        hint::retrieve_challenge_by_id,
        hint::update_by_id,
        instance::create,
        instance::create_new,
        instance::delete_by_id,
        instance::destroy,
        instance::list,
        instance::retrieve_by_id,
        instance::retrieve_challenge_by_id,
        instance::retrieve_player_by_id,
        instance::update_by_id,
        invite::create,
        invite::delete_by_id,
        invite::join_team,
        invite::list,
        invite::retrieve_by_id,
        invite::retrieve_team_by_id,
        invite::update_by_id,
        notification::create,
        notification::delete_by_id,
        notification::list,
        notification::retrieve_by_id,
        notification::retrieve_player_by_id,
        notification::update_by_id,
        player::create,
        player::delete_by_id,
        player::join_team_by_team_name,
        player::list_achievements_by_id,
        player::list_flags_by_id,
        player::list,
        player::retrieve_by_id,
        player::retrieve_instance_by_id,
        player::retrieve_profile_by_username,
        player::retrieve_team_by_id,
        player::update_by_id,
        player::update_profile_by_id,
        stats::get,
        tag::create,
        tag::delete_by_id,
        tag::list_challenges_by_id,
        tag::list,
        tag::retrieve_by_id,
        tag::update_by_id,
        team::create,
        team::delete_by_id,
        team::list_invites_by_id,
        team::list_players_by_id,
        team::list,
        team::retrieve_by_id,
        team::update_by_id,
    ),
    components(
        schemas(
            AchievementDetails,
            AchievementModel,
            BackendEnum,
            BanDetails,
            BanModel,
            ChallengeDetails,
            ChallengeHint,
            ChallengeModel,
            ChallengeRelations,
            ChallengeSolves,
            ContainerMeta,
            CreateChallengeSchema,
            DifficultyEnum,
            ErrorModel,
            FileDetails,
            FileModel,
            FlagDetails,
            FlagModel,
            FlagTypeEnum,
            FlagVerificationResult,
            HintDetails,
            HintModel,
            InstanceDetails,
            InstanceModel,
            InviteDetails,
            InviteModel,
            JsonResponse,
            LoginModel,
            NotificationDetails,
            NotificationModel,
            PlayerDetails,
            PlayerModel,
            PlayerProfile,
            RegisterPlayer,
            ResetPasswordSchema,
            RoleEnum,
            SendTokenSchema,
            StatSchema,
            StrippedCompose,
            ChallengeStatusEnum,
            SubmissionDetails,
            SubmissionModel,
            TagDetails,
            TagModel,
            TagSolves,
            TeamDetails,
            TeamModel,
            TokenPair,
            UpdateProfileSchema,
            UploadedFile,
            VerifyFlagSchema,
            VerifySchema,
        ),
    ),
    modifiers(&SecurityAddon),
    security(
        ("bearerAuth" = [])
    ),
    tags(
        (name = "achievement", description = "Routes regarding the achievement table"),
        (name = "auth", description = "Routes regarding authentication/authorization"),
        (name = "ban", description = "Routes regarding the ban table"),
        (name = "challenge", description = "Routes regarding the challenge table"),
        (name = "file", description = "Routes regarding the file table"),
        (name = "flag", description = "Routes regarding the flag table"),
        (name = "hint", description = "Routes regarding the hint table"),
        (name = "instance", description = "Routes regarding the instance table"),
        (name = "invite", description = "Routes regarding the invite table"),
        (name = "notification", description = "Routes regarding the notification table"),
        (name = "player", description = "Routes regarding the player table"),
        (name = "submission", description = "Routes regarding the submission table"),
        (name = "tag", description = "Routes regarding the tag table"),
        (name = "team", description = "Routes regarding the team table"),
        (name = "user", description = "Routes regarding the user table")
    )
)]
pub struct Openapi;

pub struct SecurityAddon;

impl Modify for SecurityAddon {
    fn modify(&self, openapi: &mut utoipa::openapi::OpenApi) {
        let mut bearer_auth = Http::new(HttpAuthScheme::Bearer);
        bearer_auth.bearer_format = Some("JWT".to_owned());

        if let Some(components) = openapi.components.as_mut() {
            components.add_security_scheme("bearerAuth", SecurityScheme::Http(bearer_auth));
        }
    }
}
