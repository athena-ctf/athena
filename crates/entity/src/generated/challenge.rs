//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use super::sea_orm_active_enums::ChallengeKindEnum;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "challenge")]
#[api_macros::gen_schemas(id_descriptor = "title")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub title: String,
    pub description: String,
    pub points: i32,
    pub level: i32,
    pub kind: ChallengeKindEnum,
    pub author_name: String,
    pub tags: Vec<String>,
    pub max_attempts: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::challenge_file::Entity")]
    ChallengeFile,
    #[sea_orm(has_many = "super::container::Entity")]
    Container,
    #[sea_orm(has_many = "super::deployment::Entity")]
    Deployment,
    #[sea_orm(has_many = "super::flag::Entity")]
    Flag,
    #[sea_orm(has_many = "super::hint::Entity")]
    Hint,
    #[sea_orm(has_many = "super::submission::Entity")]
    Submission,
}

impl Related<super::challenge_file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChallengeFile.def()
    }
}

impl Related<super::container::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Container.def()
    }
}

impl Related<super::deployment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Deployment.def()
    }
}

impl Related<super::flag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Flag.def()
    }
}

impl Related<super::hint::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Hint.def()
    }
}

impl Related<super::submission::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Submission.def()
    }
}

impl Related<super::file::Entity> for Entity {
    fn to() -> RelationDef {
        super::challenge_file::Relation::File.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::challenge_file::Relation::Challenge.def().rev())
    }
}

impl Related<super::player::Entity> for Entity {
    fn to() -> RelationDef {
        super::submission::Relation::Player.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::submission::Relation::Challenge.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
