//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa::ToSchema,
)]
#[sea_orm(table_name = "container")]
#[schema(as = ContainerModel)]
#[oxide_macros::gen_schemas(table_name = "container", id_descriptor = "name")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub challenge_id: Uuid,
    pub name: String,
    pub image: String,
    pub internal: bool,
    pub memory_limit: i32,
    pub command: String,
    pub environment: Vec<String>,
    pub ports: Vec<i32>,
    pub networks: Vec<String>,
    pub depends_on: Vec<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::challenge::Entity",
        from = "Column::ChallengeId",
        to = "super::challenge::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Challenge,
}

impl Related<super::challenge::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Challenge.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
