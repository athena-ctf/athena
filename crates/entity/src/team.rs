//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    utoipa :: ToSchema,
    oxide_macros :: derive :: Details,
)]
#[sea_orm(table_name = "team")]
#[schema(as = TeamModel)]
#[oxide(table(name = "Team", impl_new))]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub email: String,
    pub name: String,
    pub score: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::invite::Entity")]
    Invite,
    #[sea_orm(has_many = "super::player::Entity")]
    Player,
}

impl Related<super::invite::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Invite.def()
    }
}

impl Related<super::player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Player.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
