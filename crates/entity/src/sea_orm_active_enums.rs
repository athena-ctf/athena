//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Copy,
    Serialize,
    Deserialize,
    utoipa::ToSchema,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "difficulty_enum")]
#[serde(rename_all = "snake_case")]
pub enum DifficultyEnum {
    #[sea_orm(string_value = "easy")]
    Easy,
    #[sea_orm(string_value = "extreme")]
    Extreme,
    #[sea_orm(string_value = "hard")]
    Hard,
    #[sea_orm(string_value = "medium")]
    Medium,
}
#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Copy,
    Serialize,
    Deserialize,
    utoipa::ToSchema,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "flag_type_enum")]
#[serde(rename_all = "snake_case")]
pub enum ChallengeTypeEnum {
    #[sea_orm(string_value = "containerized")]
    Containerized,
    #[sea_orm(string_value = "regex_flag")]
    RegexFlag,
    #[sea_orm(string_value = "static_flag")]
    StaticFlag,
}
#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Copy,
    Serialize,
    Deserialize,
    utoipa::ToSchema,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "group_enum")]
#[serde(rename_all = "snake_case")]
pub enum GroupEnum {
    #[sea_orm(string_value = "admin")]
    Admin,
    #[sea_orm(string_value = "player")]
    Player,
}
#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Copy,
    Serialize,
    Deserialize,
    utoipa::ToSchema,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "role_enum")]
#[serde(rename_all = "snake_case")]
pub enum RoleEnum {
    #[sea_orm(string_value = "analyst")]
    Analyst,
    #[sea_orm(string_value = "editor")]
    Editor,
    #[sea_orm(string_value = "judge")]
    Judge,
    #[sea_orm(string_value = "manager")]
    Manager,
    #[sea_orm(string_value = "moderator")]
    Moderator,
}
#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Copy,
    Serialize,
    Deserialize,
    utoipa::ToSchema,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "ticket_status_enum")]
#[serde(rename_all = "snake_case")]
pub enum TicketStatusEnum {
    #[sea_orm(string_value = "closed")]
    Closed,
    #[sea_orm(string_value = "open")]
    Open,
    #[sea_orm(string_value = "resolved")]
    Resolved,
}
