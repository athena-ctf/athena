//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa :: ToSchema,
)]
#[sea_orm(table_name = "team")]
# [schema (as = TeamModel)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub date_created: DateTime,
    pub email: String,
    pub name: String,
    pub ban_id: Option<Uuid>,
    pub score: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::ban::Entity",
        from = "Column::BanId",
        to = "super::ban::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Ban,
    #[sea_orm(has_many = "super::invite::Entity")]
    Invite,
    #[sea_orm(has_many = "super::player::Entity")]
    Player,
}

impl Related<super::ban::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ban.def()
    }
}

impl Related<super::invite::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Invite.def()
    }
}

impl Related<super::player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Player.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
