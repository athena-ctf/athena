// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package config

import "time"

type Aws map[string]interface{}

type Azure struct {
	// AccountKey corresponds to the JSON schema field "account_key".
	AccountKey string `json:"account_key"`

	// AccountName corresponds to the JSON schema field "account_name".
	AccountName string `json:"account_name"`
}

type Challenge struct {
	// ContainerRegistry corresponds to the JSON schema field "container_registry".
	ContainerRegistry string `json:"container_registry"`

	// ContainerTimeout corresponds to the JSON schema field "container_timeout".
	ContainerTimeout int `json:"container_timeout"`

	// MaxAttempts corresponds to the JSON schema field "max_attempts".
	MaxAttempts *int `json:"max_attempts,omitempty"`

	// PlayerFlagLen corresponds to the JSON schema field "player_flag_len".
	PlayerFlagLen int `json:"player_flag_len"`

	// RegistryPassword corresponds to the JSON schema field "registry_password".
	RegistryPassword string `json:"registry_password"`

	// RegistryUsername corresponds to the JSON schema field "registry_username".
	RegistryUsername string `json:"registry_username"`
}

type CompressionKind string

const CompressionKindBr CompressionKind = "br"
const CompressionKindGzip CompressionKind = "gzip"
const CompressionKindZstd CompressionKind = "zstd"

type Ctf struct {
	// Description corresponds to the JSON schema field "description".
	Description string `json:"description"`

	// Domain corresponds to the JSON schema field "domain".
	Domain string `json:"domain"`

	// LevelMap corresponds to the JSON schema field "level_map".
	LevelMap CtfLevelMap `json:"level_map"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`

	// Prizes corresponds to the JSON schema field "prizes".
	Prizes CtfPrizes `json:"prizes"`

	// Sponsors corresponds to the JSON schema field "sponsors".
	Sponsors CtfSponsors `json:"sponsors"`

	// Time corresponds to the JSON schema field "time".
	Time Time `json:"time"`
}

type CtfLevelMap map[string]Level

type CtfPrizes map[string][]string

type CtfSponsors map[string][]Sponsor

type Database struct {
	// DatabaseName corresponds to the JSON schema field "database_name".
	DatabaseName string `json:"database_name,omitempty"`

	// Host corresponds to the JSON schema field "host".
	Host string `json:"host"`

	// ListenerChannel corresponds to the JSON schema field "listener_channel".
	ListenerChannel string `json:"listener_channel"`

	// Password corresponds to the JSON schema field "password".
	Password string `json:"password"`

	// Port corresponds to the JSON schema field "port".
	Port int `json:"port"`

	// Username corresponds to the JSON schema field "username".
	Username string `json:"username"`
}

type Discord struct {
	// BotToken corresponds to the JSON schema field "bot_token".
	BotToken string `json:"bot_token"`

	// EditorRoleId corresponds to the JSON schema field "editor_role_id".
	EditorRoleId string `json:"editor_role_id"`

	// GeneralChannelId corresponds to the JSON schema field "general_channel_id".
	GeneralChannelId string `json:"general_channel_id"`

	// LogsChannelId corresponds to the JSON schema field "logs_channel_id".
	LogsChannelId string `json:"logs_channel_id"`

	// ReactionRoleMessageId corresponds to the JSON schema field
	// "reaction_role_message_id".
	ReactionRoleMessageId string `json:"reaction_role_message_id"`

	// ViewerRoleId corresponds to the JSON schema field "viewer_role_id".
	ViewerRoleId string `json:"viewer_role_id"`

	// WelcomeChannelId corresponds to the JSON schema field "welcome_channel_id".
	WelcomeChannelId string `json:"welcome_channel_id"`
}

type Docker struct {
	// RegistryPassword corresponds to the JSON schema field "registry_password".
	RegistryPassword string `json:"registry_password"`

	// RegistryUrl corresponds to the JSON schema field "registry_url".
	RegistryUrl string `json:"registry_url"`

	// RegistryUsername corresponds to the JSON schema field "registry_username".
	RegistryUsername string `json:"registry_username"`
}

type FileStorage struct {
	// Aws corresponds to the JSON schema field "aws".
	Aws Aws `json:"aws,omitempty"`

	// Azure corresponds to the JSON schema field "azure".
	Azure *Azure `json:"azure,omitempty"`

	// Gcp corresponds to the JSON schema field "gcp".
	Gcp Gcp `json:"gcp,omitempty"`

	// Local corresponds to the JSON schema field "local".
	Local *Local `json:"local,omitempty"`

	// RemoteStorageOptions corresponds to the JSON schema field
	// "remote_storage_options".
	RemoteStorageOptions *RemoteStorageOptions `json:"remote_storage_options,omitempty"`
}

type Gcp map[string]interface{}

type Jwt struct {
	// AccessExpiryDuration corresponds to the JSON schema field
	// "access_expiry_duration".
	AccessExpiryDuration int `json:"access_expiry_duration"`

	// RefreshExpiryDuration corresponds to the JSON schema field
	// "refresh_expiry_duration".
	RefreshExpiryDuration int `json:"refresh_expiry_duration"`

	// Secret corresponds to the JSON schema field "secret".
	Secret string `json:"secret"`
}

type Level struct {
	// Color corresponds to the JSON schema field "color".
	Color string `json:"color"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`
}

type Local struct {
	// Compress corresponds to the JSON schema field "compress".
	Compress *CompressionKind `json:"compress,omitempty"`

	// Path corresponds to the JSON schema field "path".
	Path string `json:"path"`
}

type Redis struct {
	// Host corresponds to the JSON schema field "host".
	Host string `json:"host"`

	// Password corresponds to the JSON schema field "password".
	Password string `json:"password"`

	// Port corresponds to the JSON schema field "port".
	Port int `json:"port"`

	// Username corresponds to the JSON schema field "username".
	Username string `json:"username"`
}

type RemoteStorageOptions struct {
	// BucketName corresponds to the JSON schema field "bucket_name".
	BucketName string `json:"bucket_name"`

	// Expires corresponds to the JSON schema field "expires".
	Expires int `json:"expires"`
}

type Settings struct {
	// Challenge corresponds to the JSON schema field "challenge".
	Challenge Challenge `json:"challenge"`

	// Ctf corresponds to the JSON schema field "ctf".
	Ctf Ctf `json:"ctf"`

	// Database corresponds to the JSON schema field "database".
	Database Database `json:"database"`

	// Discord corresponds to the JSON schema field "discord".
	Discord Discord `json:"discord"`

	// Docker corresponds to the JSON schema field "docker".
	Docker Docker `json:"docker"`

	// FileStorage corresponds to the JSON schema field "file_storage".
	FileStorage FileStorage `json:"file_storage"`

	// Jwt corresponds to the JSON schema field "jwt".
	Jwt Jwt `json:"jwt"`

	// Location corresponds to the JSON schema field "location".
	Location *string `json:"location,omitempty"`

	// Redis corresponds to the JSON schema field "redis".
	Redis Redis `json:"redis"`

	// Smtp corresponds to the JSON schema field "smtp".
	Smtp Smtp `json:"smtp"`

	// Token corresponds to the JSON schema field "token".
	Token Token `json:"token"`
}

type Smtp struct {
	// From corresponds to the JSON schema field "from".
	From string `json:"from"`

	// Password corresponds to the JSON schema field "password".
	Password string `json:"password"`

	// ReplyTo corresponds to the JSON schema field "reply_to".
	ReplyTo string `json:"reply_to"`

	// ServerUrl corresponds to the JSON schema field "server_url".
	ServerUrl string `json:"server_url"`

	// Username corresponds to the JSON schema field "username".
	Username string `json:"username"`
}

type Sponsor struct {
	// Logo corresponds to the JSON schema field "logo".
	Logo string `json:"logo"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`
}

type Time struct {
	// End corresponds to the JSON schema field "end".
	End time.Time `json:"end"`

	// Freeze corresponds to the JSON schema field "freeze".
	Freeze time.Time `json:"freeze"`

	// Start corresponds to the JSON schema field "start".
	Start time.Time `json:"start"`
}

type Token struct {
	// MaxRetries corresponds to the JSON schema field "max_retries".
	MaxRetries int `json:"max_retries"`

	// TokenExpiryInSecs corresponds to the JSON schema field "token_expiry_in_secs".
	TokenExpiryInSecs int `json:"token_expiry_in_secs"`
}
