// Code generated by ent, DO NOT EDIT.

package file

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the file type in the database.
	Label = "file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldBackend holds the string denoting the backend field in the database.
	FieldBackend = "backend"
	// Table holds the table name of the file in the database.
	Table = "files"
)

// Columns holds all SQL columns for file fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldBackend,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Backend defines the type for the "backend" enum field.
type Backend string

// Backend values.
const (
	BackendLocal Backend = "local"
	BackendS3    Backend = "s3"
	BackendAzure Backend = "azure"
	BackendGcp   Backend = "gcp"
)

func (b Backend) String() string {
	return string(b)
}

// BackendValidator is a validator for the "backend" field enum values. It is called by the builders before save.
func BackendValidator(b Backend) error {
	switch b {
	case BackendLocal, BackendS3, BackendAzure, BackendGcp:
		return nil
	default:
		return fmt.Errorf("file: invalid enum value for backend field: %q", b)
	}
}

// OrderOption defines the ordering options for the File queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByBackend orders the results by the backend field.
func ByBackend(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackend, opts...).ToFunc()
}
