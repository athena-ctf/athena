/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/admin/achievement": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List achievements */
    get: operations["list_achievements"];
    put?: never;
    /** Create achievement */
    post: operations["create_achievement"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/achievement/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve achievement by id */
    get: operations["retrieve_achievement_by_id"];
    put?: never;
    post?: never;
    /** Delete achievement by id */
    delete: operations["delete_achievement_by_id"];
    options?: never;
    head?: never;
    /** Update achievement by id */
    patch: operations["update_achievement_by_id"];
    trace?: never;
  };
  "/admin/achievement/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve achievement relations by id */
    get: operations["retrieve_achievement_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/admin": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List admins */
    get: operations["list_admins"];
    put?: never;
    /** Create admin */
    post: operations["create_admin"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/admin/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve admin by id */
    get: operations["retrieve_admin_by_id"];
    put?: never;
    post?: never;
    /** Delete admin by id */
    delete: operations["delete_admin_by_id"];
    options?: never;
    head?: never;
    /** Update admin by id */
    patch: operations["update_admin_by_id"];
    trace?: never;
  };
  "/admin/admin/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve admin relations by id */
    get: operations["retrieve_admin_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/ban": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List bans */
    get: operations["list_bans"];
    put?: never;
    /** Create ban */
    post: operations["create_ban"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/ban/player/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Ban player by id */
    post: operations["add_player_by_id"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/ban/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve ban by id */
    get: operations["retrieve_ban_by_id"];
    put?: never;
    post?: never;
    /** Delete ban by id */
    delete: operations["delete_ban_by_id"];
    options?: never;
    head?: never;
    /** Update ban by id */
    patch: operations["update_ban_by_id"];
    trace?: never;
  };
  "/admin/ban/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve ban relations by id */
    get: operations["retrieve_ban_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/challenge": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List challenges */
    get: operations["list_challenges"];
    put?: never;
    /** Create challenge */
    post: operations["create_challenge"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/challenge/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve challenge by id */
    get: operations["retrieve_challenge_by_id"];
    put?: never;
    post?: never;
    /** Delete challenge by id */
    delete: operations["delete_challenge_by_id"];
    options?: never;
    head?: never;
    /** Update challenge by id */
    patch: operations["update_challenge_by_id"];
    trace?: never;
  };
  "/admin/challenge/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve challenge relations by id */
    get: operations["retrieve_challenge_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/challenge_tag": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List challenge_tags */
    get: operations["list_challenge_tags"];
    put?: never;
    /** Create ChallengeTag */
    post: operations["create_challenge_tag"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/challenge_tag/{challenge_id}-{tag_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve challenge_tag by id */
    get: operations["retrieve_challenge_tag_by_id"];
    put?: never;
    post?: never;
    /** Delete challenge_tag by id */
    delete: operations["delete_challenge_tag_by_id"];
    options?: never;
    head?: never;
    /** Update challenge_tag by id */
    patch: operations["update_challenge_tag_by_id"];
    trace?: never;
  };
  "/admin/challenge_tag/{challenge_id}-{tag_id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve challenge_tag relations by id */
    get: operations["retrieve_challenge_tag_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/container": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List containers */
    get: operations["list_containers"];
    put?: never;
    /** Create container */
    post: operations["create_container"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/container/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve container by id */
    get: operations["retrieve_container_by_id"];
    put?: never;
    post?: never;
    /** Delete container by id */
    delete: operations["delete_container_by_id"];
    options?: never;
    head?: never;
    /** Update container by id */
    patch: operations["update_container_by_id"];
    trace?: never;
  };
  "/admin/container/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve container relations by id */
    get: operations["retrieve_container_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/current": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Return currently authenticated user */
    get: operations["admin_get_current"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/deployment": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List deployments */
    get: operations["list_deployments"];
    put?: never;
    /** Create deployment */
    post: operations["create_deployment"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/deployment/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve deployment by id */
    get: operations["retrieve_deployment_by_id"];
    put?: never;
    post?: never;
    /** Delete deployment by id */
    delete: operations["delete_deployment_by_id"];
    options?: never;
    head?: never;
    /** Update deployment by id */
    patch: operations["update_deployment_by_id"];
    trace?: never;
  };
  "/admin/deployment/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve deployment relations by id */
    get: operations["retrieve_deployment_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/file": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List files */
    get: operations["list_files"];
    put?: never;
    /** Create file */
    post: operations["create_file"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/file/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve file by id */
    get: operations["retrieve_file_by_id"];
    put?: never;
    post?: never;
    /** Delete file by id */
    delete: operations["delete_file_by_id"];
    options?: never;
    head?: never;
    /** Update file by id */
    patch: operations["update_file_by_id"];
    trace?: never;
  };
  "/admin/file/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve file relations by id */
    get: operations["retrieve_file_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/flag": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List flags */
    get: operations["list_flags"];
    put?: never;
    /** Create flag */
    post: operations["create_flag"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/flag/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve flag by id */
    get: operations["retrieve_flag_by_id"];
    put?: never;
    post?: never;
    /** Delete flag by id */
    delete: operations["delete_flag_by_id"];
    options?: never;
    head?: never;
    /** Update flag by id */
    patch: operations["update_flag_by_id"];
    trace?: never;
  };
  "/admin/flag/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve flag relations by id */
    get: operations["retrieve_flag_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/hint": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List hints */
    get: operations["list_hints"];
    put?: never;
    /** Create hint */
    post: operations["create_hint"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/hint/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve hint by id */
    get: operations["retrieve_hint_by_id"];
    put?: never;
    post?: never;
    /** Delete hint by id */
    delete: operations["delete_hint_by_id"];
    options?: never;
    head?: never;
    /** Update hint by id */
    patch: operations["update_hint_by_id"];
    trace?: never;
  };
  "/admin/hint/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve hint relations by id */
    get: operations["retrieve_hint_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/instance": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List instances */
    get: operations["list_instances"];
    put?: never;
    /** Create instance */
    post: operations["create_instance"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/instance/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve instance by id */
    get: operations["retrieve_instance_by_id"];
    put?: never;
    post?: never;
    /** Delete instance by id */
    delete: operations["delete_instance_by_id"];
    options?: never;
    head?: never;
    /** Update instance by id */
    patch: operations["update_instance_by_id"];
    trace?: never;
  };
  "/admin/instance/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve instance relations by id */
    get: operations["retrieve_instance_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/invite": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List invites */
    get: operations["list_invites"];
    put?: never;
    /** Create invite */
    post: operations["create_invite"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/invite/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve invite by id */
    get: operations["retrieve_invite_by_id"];
    put?: never;
    post?: never;
    /** Delete invite by id */
    delete: operations["delete_invite_by_id"];
    options?: never;
    head?: never;
    /** Update invite by id */
    patch: operations["update_invite_by_id"];
    trace?: never;
  };
  "/admin/invite/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve invite relations by id */
    get: operations["retrieve_invite_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/notification": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List notifications */
    get: operations["list_notifications"];
    put?: never;
    /** Create notification */
    post: operations["create_notification"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/notification/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve notification by id */
    get: operations["retrieve_notification_by_id"];
    put?: never;
    post?: never;
    /** Delete notification by id */
    delete: operations["delete_notification_by_id"];
    options?: never;
    head?: never;
    /** Update notification by id */
    patch: operations["update_notification_by_id"];
    trace?: never;
  };
  "/admin/notification/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve notification relations by id */
    get: operations["retrieve_notification_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/player": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List players */
    get: operations["list_players"];
    put?: never;
    /** Create player */
    post: operations["create_player"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/player/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve player by id */
    get: operations["retrieve_player_by_id"];
    put?: never;
    post?: never;
    /** Delete player by id */
    delete: operations["delete_player_by_id"];
    options?: never;
    head?: never;
    /** Update player by id */
    patch: operations["update_player_by_id"];
    trace?: never;
  };
  "/admin/player/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve player relations by id */
    get: operations["retrieve_player_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/settings/{*path}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve settings at path */
    get: operations["settings_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Retrieve settings at path */
    patch: operations["settings_update"];
    trace?: never;
  };
  "/admin/stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve stats of all tables */
    get: operations["retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/submission": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List submissions */
    get: operations["list_submissions"];
    put?: never;
    /** Create Submission */
    post: operations["create_submission"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/submission/{challenge_id}-{player_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve submission by id */
    get: operations["retrieve_submission_by_id"];
    put?: never;
    post?: never;
    /** Delete submission by id */
    delete: operations["delete_submission_by_id"];
    options?: never;
    head?: never;
    /** Update submission by id */
    patch: operations["update_submission_by_id"];
    trace?: never;
  };
  "/admin/submission/{challenge_id}-{player_id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve submission relations by id */
    get: operations["retrieve_submission_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/tag": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List tags */
    get: operations["list_tags"];
    put?: never;
    /** Create tag */
    post: operations["create_tag"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/tag/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve tag by id */
    get: operations["retrieve_tag_by_id"];
    put?: never;
    post?: never;
    /** Delete tag by id */
    delete: operations["delete_tag_by_id"];
    options?: never;
    head?: never;
    /** Update tag by id */
    patch: operations["update_tag_by_id"];
    trace?: never;
  };
  "/admin/tag/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve tag relations by id */
    get: operations["retrieve_tag_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/team": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List teams */
    get: operations["list_teams"];
    put?: never;
    /** Create team */
    post: operations["create_team"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/team/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve team by id */
    get: operations["retrieve_team_by_id"];
    put?: never;
    post?: never;
    /** Delete team by id */
    delete: operations["delete_team_by_id"];
    options?: never;
    head?: never;
    /** Update team by id */
    patch: operations["update_team_by_id"];
    trace?: never;
  };
  "/admin/team/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve team relations by id */
    get: operations["retrieve_team_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/ticket": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List tickets */
    get: operations["list_tickets"];
    put?: never;
    /** Create ticket */
    post: operations["create_ticket"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/ticket/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve ticket by id */
    get: operations["retrieve_ticket_by_id"];
    put?: never;
    post?: never;
    /** Delete ticket by id */
    delete: operations["delete_ticket_by_id"];
    options?: never;
    head?: never;
    /** Update ticket by id */
    patch: operations["update_ticket_by_id"];
    trace?: never;
  };
  "/admin/ticket/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve ticket relations by id */
    get: operations["retrieve_ticket_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/unlock": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List unlocks */
    get: operations["list_unlocks"];
    put?: never;
    /** Create Unlock */
    post: operations["create_unlock"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/unlock/{player_id}-{hint_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve unlock by id */
    get: operations["retrieve_unlock_by_id"];
    put?: never;
    post?: never;
    /** Delete unlock by id */
    delete: operations["delete_unlock_by_id"];
    options?: never;
    head?: never;
    /** Update unlock by id */
    patch: operations["update_unlock_by_id"];
    trace?: never;
  };
  "/admin/unlock/{player_id}-{hint_id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve unlock relations by id */
    get: operations["retrieve_unlock_relations_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/admin/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Login admin */
    post: operations["admin_login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/admin/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Logout admin */
    get: operations["admin_logout"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/player/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Login user */
    post: operations["player_login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/player/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Logout user */
    get: operations["player_logout"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/player/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register user */
    post: operations["player_register"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/player/register/invite/verify": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Verify invite */
    get: operations["player_register_verify_invite"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/player/register/send-token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send verification token to email */
    post: operations["player_register_send_token"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/player/reset-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Auth reset password */
    post: operations["player_reset_password"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/player/reset-password/send-token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send reset token to email */
    post: operations["player_reset_password_send_token"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/challenge/details/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve challenge details by id */
    get: operations["detailed_challenge"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/challenge/start/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Start challenge containers by id */
    get: operations["start_challenge"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/challenge/stop/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Stop challenge containers by id */
    get: operations["stop_challenge"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/challenges": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List challenge summary by id */
    get: operations["player_challenges"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/current": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Return currently authenticated user */
    get: operations["player_get_current"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/flag/verify": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Verify flag */
    post: operations["verify_flag"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/hint/unlock/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Unlock hint by id */
    get: operations["unlock_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/leaderboard/rankings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** List leaderboard rankings with offset and count */
    post: operations["rankings"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/leaderboard/top10": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** List top 10 of leaderboard */
    post: operations["top_10"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/notifications": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List player notifications */
    get: operations["player_list"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/summary": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve player summary */
    get: operations["retrieve_player_summary"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/team/summary": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve team summary */
    get: operations["retrieve_team_summary"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/team/{id}/profile": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Retrieve team details by teamname */
    patch: operations["update_team_profile"];
    trace?: never;
  };
  "/player/team/{team_name}/profile": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve team details by teamname */
    get: operations["retrieve_team_by_teamname"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/{id}/update-profile": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update player profile by id */
    patch: operations["update_player_profile"];
    trace?: never;
  };
  "/player/{username}/profile": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve player profile by username */
    get: operations["retrieve_profile_by_username"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AchievementModel: {
      /** Format: uuid */
      challenge_id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      player_id: string;
      /** Format: int32 */
      prize: number;
      /** Format: date-time */
      updated_at: string;
      value: string;
    };
    AchievementRelations: {
      challenge: components["schemas"]["ChallengeModel"];
      player: components["schemas"]["PlayerModel"];
    };
    AdminModel: {
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      id: string;
      role: components["schemas"]["RoleEnum"];
      /** Format: date-time */
      updated_at: string;
      /** Format: uuid */
      user_id: string;
    };
    AdminRelations: {
      tickets: components["schemas"]["TicketModel"][];
      user: components["schemas"]["UserModel"];
    };
    BanModel: {
      /** Format: date-time */
      created_at: string;
      /** Format: int32 */
      duration: number;
      /** Format: uuid */
      id: string;
      reason: string;
      /** Format: date-time */
      updated_at: string;
    };
    BanRelations: {
      player: components["schemas"]["PlayerModel"];
    };
    ChallengeModel: {
      author_name: string;
      challenge_type: components["schemas"]["ChallengeTypeEnum"];
      /** Format: date-time */
      created_at: string;
      description: string;
      /** Format: uuid */
      id: string;
      /** Format: int32 */
      level: number;
      /** Format: int32 */
      points: number;
      /** Format: int32 */
      solves: number;
      title: string;
      /** Format: date-time */
      updated_at: string;
    };
    ChallengeRelations: {
      achievements: components["schemas"]["AchievementModel"][];
      challenge_tags: components["schemas"]["ChallengeTagModel"][];
      containers: components["schemas"]["ContainerModel"][];
      deployments: components["schemas"]["DeploymentModel"][];
      files: components["schemas"]["FileModel"][];
      flags: components["schemas"]["FlagModel"][];
      hints: components["schemas"]["HintModel"][];
      players: components["schemas"]["PlayerModel"][];
      submissions: components["schemas"]["SubmissionModel"][];
      tags: components["schemas"]["TagModel"][];
    };
    ChallengeSummary: {
      challenge: components["schemas"]["ChallengeModel"];
      state: components["schemas"]["PlayerChallengeState"];
      tags: components["schemas"]["TagModel"][];
    };
    ChallengeTagModel: {
      /** Format: uuid */
      challenge_id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      tag_id: string;
      /** Format: date-time */
      updated_at: string;
    };
    ChallengeTagRelations: {
      challenge: components["schemas"]["ChallengeModel"];
      tag: components["schemas"]["TagModel"];
    };
    /** @enum {string} */
    ChallengeTypeEnum: "containerized" | "regex_flag" | "static_flag";
    ContainerModel: {
      /** Format: uuid */
      challenge_id: string;
      command: string[];
      /** Format: date-time */
      created_at: string;
      depends_on: string[];
      environment: string[];
      /** Format: uuid */
      id: string;
      image: string;
      internal: boolean;
      /** Format: int32 */
      memory_limit: number;
      name: string;
      networks: string[];
      ports: number[];
      /** Format: date-time */
      updated_at: string;
    };
    ContainerRelations: {
      challenge: components["schemas"]["ChallengeModel"];
    };
    CreateAchievementSchema: {
      /** Format: uuid */
      challenge_id: string;
      /** Format: uuid */
      player_id: string;
      /** Format: int32 */
      prize: number;
      value: string;
    };
    CreateAdminSchema: {
      role: components["schemas"]["RoleEnum"];
      /** Format: uuid */
      user_id: string;
    };
    CreateBanSchema: {
      /** Format: int32 */
      duration: number;
      reason: string;
    };
    CreateChallengeSchema: {
      author_name: string;
      challenge_type: components["schemas"]["ChallengeTypeEnum"];
      description: string;
      /** Format: int32 */
      level: number;
      /** Format: int32 */
      points: number;
      /** Format: int32 */
      solves: number;
      title: string;
    };
    CreateChallengeTagSchema: {
      /** Format: uuid */
      challenge_id: string;
      /** Format: uuid */
      tag_id: string;
    };
    CreateContainerSchema: {
      /** Format: uuid */
      challenge_id: string;
      command: string[];
      depends_on: string[];
      environment: string[];
      image: string;
      internal: boolean;
      /** Format: int32 */
      memory_limit: number;
      name: string;
      networks: string[];
      ports: number[];
    };
    CreateDeploymentSchema: {
      /** Format: uuid */
      challenge_id: string;
      /** Format: date-time */
      expires_at: string;
      hostname: string;
      /** Format: uuid */
      player_id: string;
    };
    CreateFileSchema: {
      /** Format: uuid */
      challenge_id: string;
      name: string;
      url: string;
    };
    CreateFlagSchema: {
      /** Format: uuid */
      challenge_id: string;
      ignore_case: boolean;
      /** Format: uuid */
      player_id?: string | null;
      value: string;
    };
    CreateHintSchema: {
      /** Format: uuid */
      challenge_id: string;
      /** Format: int32 */
      cost: number;
      description: string;
    };
    CreateInstanceSchema: {
      container_id: string;
      container_name: string;
      /** Format: uuid */
      deployment_id: string;
      port_mapping: string[];
    };
    CreateInviteSchema: {
      /** Format: int32 */
      remaining: number;
      /** Format: uuid */
      team_id: string;
    };
    CreateNotificationSchema: {
      content: string;
      /** Format: uuid */
      player_id?: string | null;
      title: string;
    };
    CreatePlayerSchema: {
      /** Format: uuid */
      ban_id?: string | null;
      discord_id?: string | null;
      /** Format: int32 */
      score: number;
      /** Format: uuid */
      team_id: string;
      /** Format: uuid */
      user_id: string;
    };
    CreateSubmissionSchema: {
      /** Format: uuid */
      challenge_id: string;
      flags: string[];
      is_correct: boolean;
      /** Format: uuid */
      player_id: string;
    };
    CreateTagSchema: {
      value: string;
    };
    CreateTeamSchema: {
      email: string;
      name: string;
      /** Format: int32 */
      score: number;
    };
    CreateTicketSchema: {
      /** Format: uuid */
      assigned_to?: string | null;
      /** Format: uuid */
      opened_by: string;
      status: components["schemas"]["TicketStatusEnum"];
      title: string;
    };
    CreateUnlockSchema: {
      /** Format: uuid */
      hint_id: string;
      /** Format: uuid */
      player_id: string;
    };
    DeploymentModel: {
      /** Format: uuid */
      challenge_id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      expires_at: string;
      hostname: string;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      player_id: string;
      /** Format: date-time */
      updated_at: string;
    };
    DeploymentRelations: {
      challenge: components["schemas"]["ChallengeModel"];
      instances: components["schemas"]["InstanceModel"][];
      player: components["schemas"]["PlayerModel"];
    };
    DetailedChallenge: {
      files: components["schemas"]["FileModel"][];
      hints: components["schemas"]["HintSummary"][];
    };
    FileModel: {
      /** Format: uuid */
      challenge_id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: date-time */
      updated_at: string;
      url: string;
    };
    FileRelations: {
      challenge: components["schemas"]["ChallengeModel"];
    };
    FlagModel: {
      /** Format: uuid */
      challenge_id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      id: string;
      ignore_case: boolean;
      /** Format: uuid */
      player_id?: string | null;
      /** Format: date-time */
      updated_at: string;
      value: string;
    };
    FlagRelations: {
      challenge: components["schemas"]["ChallengeModel"];
      player?: null | components["schemas"]["PlayerModel"];
    };
    FlagVerificationResult: {
      is_correct: boolean;
    };
    /** @enum {string} */
    GroupEnum: "admin" | "player";
    HintModel: {
      /** Format: uuid */
      challenge_id: string;
      /** Format: int32 */
      cost: number;
      /** Format: date-time */
      created_at: string;
      description: string;
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      updated_at: string;
    };
    HintRelations: {
      challenge: components["schemas"]["ChallengeModel"];
      players: components["schemas"]["PlayerModel"][];
      unlocks: components["schemas"]["UnlockModel"][];
    };
    HintSummary: {
      /** Format: int32 */
      cost: number;
      /** Format: uuid */
      id: string;
      status: components["schemas"]["UnlockStatus"];
    };
    InstanceModel: {
      container_id: string;
      container_name: string;
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      deployment_id: string;
      /** Format: uuid */
      id: string;
      port_mapping: string[];
      /** Format: date-time */
      updated_at: string;
    };
    InstanceRelations: {
      deployment: components["schemas"]["DeploymentModel"];
    };
    InviteModel: {
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      id: string;
      /** Format: int32 */
      remaining: number;
      /** Format: uuid */
      team_id: string;
      /** Format: date-time */
      updated_at: string;
    };
    InviteRelations: {
      team: components["schemas"]["TeamModel"];
    };
    InviteVerificationResult: {
      /** Format: uuid */
      team_id: string;
    };
    JsonResponse: {
      message: string;
    };
    LeaderboardRankings: {
      /** Format: int64 */
      count: number;
      /** Format: int64 */
      offset: number;
      rankings: components["schemas"]["Ranking"][];
      /** Format: int64 */
      total: number;
    };
    LoginModel: {
      password: string;
      username: string;
    };
    NotificationModel: {
      content: string;
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      player_id?: string | null;
      title: string;
      /** Format: date-time */
      updated_at: string;
    };
    NotificationRelations: {
      player?: null | components["schemas"]["PlayerModel"];
    };
    /** @enum {string} */
    PlayerChallengeState: "solved" | "unsolved" | "challenge_limit_reached";
    PlayerModel: {
      /** Format: uuid */
      ban_id?: string | null;
      /** Format: date-time */
      created_at: string;
      discord_id?: string | null;
      /** Format: uuid */
      id: string;
      /** Format: int32 */
      score: number;
      /** Format: uuid */
      team_id: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uuid */
      user_id: string;
    };
    PlayerProfile: {
      player: components["schemas"]["PlayerModel"];
      /** Format: int64 */
      rank: number;
      solved_challenges: components["schemas"]["ChallengeModel"][];
      tag_solves: components["schemas"]["TagSolves"][];
      user: components["schemas"]["UserModel"];
    };
    PlayerRelations: {
      achievements: components["schemas"]["AchievementModel"][];
      ban?: null | components["schemas"]["BanModel"];
      challenges: components["schemas"]["ChallengeModel"][];
      deployment?: null | components["schemas"]["DeploymentModel"];
      flags: components["schemas"]["FlagModel"][];
      hints: components["schemas"]["HintModel"][];
      notifications: components["schemas"]["NotificationModel"][];
      submissions: components["schemas"]["SubmissionModel"][];
      team: components["schemas"]["TeamModel"];
      tickets: components["schemas"]["TicketModel"][];
      unlocks: components["schemas"]["UnlockModel"][];
      user: components["schemas"]["UserModel"];
    };
    PlayerSummary: {
      achievements: components["schemas"]["AchievementModel"][];
      profile: components["schemas"]["PlayerProfile"];
      submissions: components["schemas"]["SubmissionModel"][];
      unlocks: components["schemas"]["UnlockModel"][];
    };
    Ranking: {
      member: string;
      /** Format: double */
      score: number;
    };
    RegisterPlayer: {
      display_name: string;
      email: string;
      password: string;
      team: components["schemas"]["TeamRegister"];
      token: string;
      username: string;
    };
    ResetPasswordSchema: {
      email: string;
      new_password: string;
      token: string;
    };
    /** @enum {string} */
    RoleEnum: "analyst" | "editor" | "judge" | "manager" | "moderator";
    SendTokenSchema: {
      email: string;
    };
    StatSchema: {
      /** Format: int64 */
      achievement: number;
      /** Format: int64 */
      admin: number;
      /** Format: int64 */
      ban: number;
      /** Format: int64 */
      challenge: number;
      /** Format: int64 */
      challenge_tag: number;
      /** Format: int64 */
      container: number;
      /** Format: int64 */
      deployment: number;
      /** Format: int64 */
      file: number;
      /** Format: int64 */
      flag: number;
      /** Format: int64 */
      hint: number;
      /** Format: int64 */
      instance: number;
      /** Format: int64 */
      invite: number;
      /** Format: int64 */
      notification: number;
      /** Format: int64 */
      player: number;
      /** Format: int64 */
      submission: number;
      /** Format: int64 */
      tag: number;
      /** Format: int64 */
      team: number;
      /** Format: int64 */
      ticket: number;
      /** Format: int64 */
      unlocks: number;
      /** Format: int64 */
      user: number;
    };
    SubmissionModel: {
      /** Format: uuid */
      challenge_id: string;
      /** Format: date-time */
      created_at: string;
      flags: string[];
      is_correct: boolean;
      /** Format: uuid */
      player_id: string;
      /** Format: date-time */
      updated_at: string;
    };
    SubmissionRelations: {
      challenge: components["schemas"]["ChallengeModel"];
      player: components["schemas"]["PlayerModel"];
    };
    TagModel: {
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      updated_at: string;
      value: string;
    };
    TagRelations: {
      challenge_tags: components["schemas"]["ChallengeTagModel"][];
      challenges: components["schemas"]["ChallengeModel"][];
    };
    TagSolves: {
      solves: number;
      /** Format: uuid */
      tag_id: string;
      tag_value: string;
    };
    TeamModel: {
      /** Format: date-time */
      created_at: string;
      email: string;
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: int32 */
      score: number;
      /** Format: date-time */
      updated_at: string;
    };
    TeamProfile: {
      members: components["schemas"]["PlayerModel"][];
      solved_challenges: components["schemas"]["ChallengeModel"][];
      tag_solves: components["schemas"]["TagSolves"][];
      team: components["schemas"]["TeamModel"];
    };
    TeamRegister:
      | {
          /** Format: uuid */
          invite_id: string;
          /** @enum {string} */
          kind: "join";
          /** Format: uuid */
          team_id: string;
        }
      | {
          /** @enum {string} */
          kind: "create";
          team_name: string;
        };
    TeamRelations: {
      invites: components["schemas"]["InviteModel"][];
      players: components["schemas"]["PlayerModel"][];
    };
    TeamSummary: {
      achievements: components["schemas"]["AchievementModel"][];
      members: components["schemas"]["PlayerProfile"][];
      submissions: components["schemas"]["SubmissionModel"][];
      tag_solves: components["schemas"]["TagSolves"][];
      team: components["schemas"]["TeamModel"];
      unlocks: components["schemas"]["UnlockModel"][];
    };
    TicketModel: {
      /** Format: uuid */
      assigned_to?: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      opened_by: string;
      status: components["schemas"]["TicketStatusEnum"];
      title: string;
      /** Format: date-time */
      updated_at: string;
    };
    TicketRelations: {
      admin: components["schemas"]["AdminModel"];
      player: components["schemas"]["PlayerModel"];
    };
    /** @enum {string} */
    TicketStatusEnum: "closed" | "open" | "resolved";
    UnlockModel: {
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      hint_id: string;
      /** Format: uuid */
      player_id: string;
      /** Format: date-time */
      updated_at: string;
    };
    UnlockRelations: {
      hint: components["schemas"]["HintModel"];
      player: components["schemas"]["PlayerModel"];
    };
    UnlockStatus:
      | {
          /** @enum {string} */
          kind: "locked";
        }
      | {
          /** @enum {string} */
          kind: "unlocked";
          value: string;
        };
    UpdateProfileSchema: {
      discord_id?: string | null;
      /** Format: uuid */
      team_id?: string | null;
    };
    UserModel: {
      /** Format: date-time */
      created_at: string;
      email: string;
      group: components["schemas"]["GroupEnum"];
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      updated_at: string;
      username: string;
    };
    VerifyFlagSchema: {
      /** Format: uuid */
      challenge_id: string;
      flag: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  list_achievements: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed achievements successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AchievementModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_achievement: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAchievementSchema"];
      };
    };
    responses: {
      /** @description Created achievement successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AchievementModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No achievement found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_achievement_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved achievement by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AchievementModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No achievement found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_achievement_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted achievement by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No achievement found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_achievement_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAchievementSchema"];
      };
    };
    responses: {
      /** @description Updated achievement by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AchievementModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No achievement found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_achievement_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved achievement relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AchievementRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No achievement found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_admins: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed admins successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdminModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_admin: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAdminSchema"];
      };
    };
    responses: {
      /** @description Created admin successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdminModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No admin found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_admin_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved admin by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdminModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No admin found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_admin_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted admin by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No admin found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_admin_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAdminSchema"];
      };
    };
    responses: {
      /** @description Updated admin by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdminModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No admin found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_admin_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved admin relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdminRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No admin found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_bans: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed bans successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BanModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_ban: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBanSchema"];
      };
    };
    responses: {
      /** @description Created ban successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BanModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No ban found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  add_player_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBanSchema"];
      };
    };
    responses: {
      /** @description Banned player by id successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BanModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No ban found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_ban_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved ban by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BanModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No ban found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_ban_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted ban by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No ban found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_ban_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBanSchema"];
      };
    };
    responses: {
      /** @description Updated ban by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BanModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No ban found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_ban_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved ban relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BanRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No ban found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_challenges: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed challenges successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChallengeModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_challenge: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateChallengeSchema"];
      };
    };
    responses: {
      /** @description Created challenge successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChallengeModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_challenge_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved challenge by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChallengeModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_challenge_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted challenge by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_challenge_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateChallengeSchema"];
      };
    };
    responses: {
      /** @description Updated challenge by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChallengeModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_challenge_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved challenge relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChallengeRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_challenge_tags: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed challenge_tags successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChallengeTagModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_challenge_tag: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateChallengeTagSchema"];
      };
    };
    responses: {
      /** @description Created challenge_tag successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChallengeTagModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge_tag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_challenge_tag_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        challenge_id: string;
        /** @description Id of entity */
        tag_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved challenge_tag by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChallengeTagModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge_tag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_challenge_tag_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        challenge_id: string;
        /** @description Id of entity */
        tag_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted challenge_tag by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge_tag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_challenge_tag_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        challenge_id: string;
        /** @description Id of entity */
        tag_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateChallengeTagSchema"];
      };
    };
    responses: {
      /** @description Updated challenge_tag by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChallengeTagModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge_tag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_challenge_tag_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        challenge_id: string;
        /** @description Id of entity */
        tag_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved challenge_tag relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChallengeTagRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge_tag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_containers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed containers successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ContainerModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_container: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateContainerSchema"];
      };
    };
    responses: {
      /** @description Created container successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ContainerModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No container found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_container_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved container by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ContainerModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No container found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_container_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted container by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No container found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_container_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateContainerSchema"];
      };
    };
    responses: {
      /** @description Updated container by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ContainerModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No container found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_container_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved container relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ContainerRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No container found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  admin_get_current: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Password reset email sent successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdminModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_deployments: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed deployments successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeploymentModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_deployment: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDeploymentSchema"];
      };
    };
    responses: {
      /** @description Created deployment successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeploymentModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No deployment found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_deployment_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved deployment by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeploymentModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No deployment found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_deployment_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted deployment by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No deployment found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_deployment_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDeploymentSchema"];
      };
    };
    responses: {
      /** @description Updated deployment by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeploymentModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No deployment found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_deployment_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved deployment relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeploymentRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No deployment found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_files: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed files successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FileModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_file: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFileSchema"];
      };
    };
    responses: {
      /** @description Created file successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FileModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No file found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_file_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved file by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FileModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No file found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_file_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted file by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No file found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_file_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFileSchema"];
      };
    };
    responses: {
      /** @description Updated file by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FileModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No file found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_file_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved file relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FileRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No file found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_flags: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed flags successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FlagModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_flag: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFlagSchema"];
      };
    };
    responses: {
      /** @description Created flag successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FlagModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No flag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_flag_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved flag by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FlagModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No flag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_flag_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted flag by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No flag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_flag_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFlagSchema"];
      };
    };
    responses: {
      /** @description Updated flag by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FlagModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No flag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_flag_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved flag relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FlagRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No flag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_hints: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed hints successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HintModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_hint: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateHintSchema"];
      };
    };
    responses: {
      /** @description Created hint successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HintModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No hint found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_hint_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved hint by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HintModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No hint found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_hint_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted hint by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No hint found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_hint_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateHintSchema"];
      };
    };
    responses: {
      /** @description Updated hint by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HintModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No hint found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_hint_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved hint relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HintRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No hint found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_instances: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed instances successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InstanceModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_instance: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateInstanceSchema"];
      };
    };
    responses: {
      /** @description Created instance successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InstanceModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No instance found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_instance_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved instance by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InstanceModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No instance found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_instance_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted instance by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No instance found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_instance_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateInstanceSchema"];
      };
    };
    responses: {
      /** @description Updated instance by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InstanceModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No instance found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_instance_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved instance relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InstanceRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No instance found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_invites: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed invites successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InviteModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_invite: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateInviteSchema"];
      };
    };
    responses: {
      /** @description Created invite successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InviteModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No invite found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_invite_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved invite by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InviteModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No invite found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_invite_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted invite by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No invite found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_invite_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateInviteSchema"];
      };
    };
    responses: {
      /** @description Updated invite by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InviteModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No invite found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_invite_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved invite relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InviteRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No invite found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_notifications: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed notifications successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotificationModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_notification: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateNotificationSchema"];
      };
    };
    responses: {
      /** @description Created notification successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotificationModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No notification found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_notification_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved notification by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotificationModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No notification found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_notification_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted notification by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No notification found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_notification_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateNotificationSchema"];
      };
    };
    responses: {
      /** @description Updated notification by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotificationModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No notification found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_notification_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved notification relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotificationRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No notification found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_players: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed players successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_player: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePlayerSchema"];
      };
    };
    responses: {
      /** @description Created player successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No player found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_player_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved player by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No player found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_player_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted player by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No player found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_player_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePlayerSchema"];
      };
    };
    responses: {
      /** @description Updated player by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No player found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_player_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved player relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No player found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  settings_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The path to the resource */
        path: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved settings successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  settings_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The path to the resource */
        path: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      /** @description Retrieved settings successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved stats successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StatSchema"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_submissions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed submissions successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubmissionModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_submission: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSubmissionSchema"];
      };
    };
    responses: {
      /** @description Created submission successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubmissionModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No submission found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_submission_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        challenge_id: string;
        /** @description Id of entity */
        player_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved submission by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubmissionModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No submission found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_submission_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        challenge_id: string;
        /** @description Id of entity */
        player_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted submission by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No submission found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_submission_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        challenge_id: string;
        /** @description Id of entity */
        player_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSubmissionSchema"];
      };
    };
    responses: {
      /** @description Updated submission by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubmissionModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No submission found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_submission_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        challenge_id: string;
        /** @description Id of entity */
        player_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved submission relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubmissionRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No submission found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_tags: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed tags successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TagModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_tag: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTagSchema"];
      };
    };
    responses: {
      /** @description Created tag successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TagModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No tag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_tag_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved tag by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TagModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No tag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_tag_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted tag by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No tag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_tag_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTagSchema"];
      };
    };
    responses: {
      /** @description Updated tag by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TagModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No tag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_tag_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved tag relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TagRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No tag found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_teams: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed teams successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_team: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTeamSchema"];
      };
    };
    responses: {
      /** @description Created team successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No team found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_team_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved team by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No team found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_team_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted team by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No team found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_team_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTeamSchema"];
      };
    };
    responses: {
      /** @description Updated team by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No team found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_team_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved team relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No team found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_tickets: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed tickets successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TicketModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_ticket: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTicketSchema"];
      };
    };
    responses: {
      /** @description Created ticket successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TicketModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No ticket found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_ticket_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved ticket by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TicketModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No ticket found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_ticket_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted ticket by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No ticket found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_ticket_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTicketSchema"];
      };
    };
    responses: {
      /** @description Updated ticket by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TicketModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No ticket found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_ticket_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved ticket relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TicketRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No ticket found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  list_unlocks: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed unlocks successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnlockModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  create_unlock: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUnlockSchema"];
      };
    };
    responses: {
      /** @description Created unlock successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnlockModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No unlock found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_unlock_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        player_id: string;
        /** @description Id of entity */
        hint_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved unlock by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnlockModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No unlock found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  delete_unlock_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        player_id: string;
        /** @description Id of entity */
        hint_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted unlock by id successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No unlock found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_unlock_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        player_id: string;
        /** @description Id of entity */
        hint_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUnlockSchema"];
      };
    };
    responses: {
      /** @description Updated unlock by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnlockModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No unlock found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_unlock_relations_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        player_id: string;
        /** @description Id of entity */
        hint_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved unlock relations by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnlockRelations"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No unlock found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  admin_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginModel"];
      };
    };
    responses: {
      /** @description user logged in successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdminModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  admin_logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description user logged in successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  player_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginModel"];
      };
    };
    responses: {
      /** @description Player logged in successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  player_logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Refreshed token successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  player_register: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterPlayer"];
      };
    };
    responses: {
      /** @description Registered user successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  player_register_verify_invite: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Verified invite successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InviteVerificationResult"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  player_register_send_token: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendTokenSchema"];
      };
    };
    responses: {
      /** @description Token sent successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  player_reset_password: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordSchema"];
      };
    };
    responses: {
      /** @description Reset password successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  player_reset_password_send_token: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendTokenSchema"];
      };
    };
    responses: {
      /** @description Token sent successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  detailed_challenge: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the challenge */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved player challenge details successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DetailedChallenge"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  start_challenge: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the challenge */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Started challenge containers successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeploymentModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  stop_challenge: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the challenge */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Stopped challenge containers successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  player_challenges: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed player challenges successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChallengeSummary"][];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No challenge found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  player_get_current: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved current logged in user successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerModel"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  verify_flag: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyFlagSchema"];
      };
    };
    responses: {
      /** @description Verified flag successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FlagVerificationResult"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  unlock_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Unlocked hint by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HintModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No hint found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  rankings: {
    parameters: {
      query: {
        /** @description Offset of the rankings */
        offset: number;
        /** @description Number of players to get */
        count: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed leaderboard rankings with offset and count successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LeaderboardRankings"];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  top_10: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed top 10 rankings successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Ranking"][];
        };
      };
      /** @description Invalid request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  player_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listed notifications successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotificationModel"][];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No hint found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_player_summary: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved player summary by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerSummary"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No player found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_team_summary: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved team summary by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamSummary"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No player found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_team_profile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTeamSchema"];
      };
    };
    responses: {
      /** @description Retrieved team details by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamModel"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No player found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_team_by_teamname: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Team name of team */
        team_name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved team details by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamProfile"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No player found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  update_player_profile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of entity */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProfileSchema"];
      };
    };
    responses: {
      /** @description Updated player profile by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerModel"];
        };
      };
      /** @description Invalid parameters/request body format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No player found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
  retrieve_profile_by_username: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Username of user */
        username: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieved player profile by id successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerProfile"];
        };
      };
      /** @description Invalid parameters format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Action is permissible after login */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description User does not have sufficient permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description No player found with specified id */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonResponse"];
        };
      };
    };
  };
}
