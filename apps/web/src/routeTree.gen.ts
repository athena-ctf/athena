/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TeamImport } from './routes/team'
import { Route as RulesImport } from './routes/rules'
import { Route as ProfileImport } from './routes/profile'
import { Route as TeamTeamnameImport } from './routes/team/$teamname'
import { Route as ScoreboardTeamImport } from './routes/scoreboard/team'
import { Route as ScoreboardPlayerImport } from './routes/scoreboard/player'
import { Route as ProfileUsernameImport } from './routes/profile/$username'
import { Route as AuthResetImport } from './routes/auth/reset'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLogoutImport } from './routes/auth/logout'
import { Route as AuthLoginImport } from './routes/auth/login'

// Create Virtual Routes

const ChallengesLazyImport = createFileRoute('/challenges')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ChallengesLazyRoute = ChallengesLazyImport.update({
  id: '/challenges',
  path: '/challenges',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/challenges.lazy').then((d) => d.Route))

const TeamRoute = TeamImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => rootRoute,
} as any)

const RulesRoute = RulesImport.update({
  id: '/rules',
  path: '/rules',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TeamTeamnameRoute = TeamTeamnameImport.update({
  id: '/$teamname',
  path: '/$teamname',
  getParentRoute: () => TeamRoute,
} as any)

const ScoreboardTeamRoute = ScoreboardTeamImport.update({
  id: '/scoreboard/team',
  path: '/scoreboard/team',
  getParentRoute: () => rootRoute,
} as any)

const ScoreboardPlayerRoute = ScoreboardPlayerImport.update({
  id: '/scoreboard/player',
  path: '/scoreboard/player',
  getParentRoute: () => rootRoute,
} as any)

const ProfileUsernameRoute = ProfileUsernameImport.update({
  id: '/$username',
  path: '/$username',
  getParentRoute: () => ProfileRoute,
} as any)

const AuthResetRoute = AuthResetImport.update({
  id: '/auth/reset',
  path: '/auth/reset',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLogoutRoute = AuthLogoutImport.update({
  id: '/auth/logout',
  path: '/auth/logout',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/rules': {
      id: '/rules'
      path: '/rules'
      fullPath: '/rules'
      preLoaderRoute: typeof RulesImport
      parentRoute: typeof rootRoute
    }
    '/team': {
      id: '/team'
      path: '/team'
      fullPath: '/team'
      preLoaderRoute: typeof TeamImport
      parentRoute: typeof rootRoute
    }
    '/challenges': {
      id: '/challenges'
      path: '/challenges'
      fullPath: '/challenges'
      preLoaderRoute: typeof ChallengesLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/logout': {
      id: '/auth/logout'
      path: '/auth/logout'
      fullPath: '/auth/logout'
      preLoaderRoute: typeof AuthLogoutImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/auth/reset': {
      id: '/auth/reset'
      path: '/auth/reset'
      fullPath: '/auth/reset'
      preLoaderRoute: typeof AuthResetImport
      parentRoute: typeof rootRoute
    }
    '/profile/$username': {
      id: '/profile/$username'
      path: '/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof ProfileUsernameImport
      parentRoute: typeof ProfileImport
    }
    '/scoreboard/player': {
      id: '/scoreboard/player'
      path: '/scoreboard/player'
      fullPath: '/scoreboard/player'
      preLoaderRoute: typeof ScoreboardPlayerImport
      parentRoute: typeof rootRoute
    }
    '/scoreboard/team': {
      id: '/scoreboard/team'
      path: '/scoreboard/team'
      fullPath: '/scoreboard/team'
      preLoaderRoute: typeof ScoreboardTeamImport
      parentRoute: typeof rootRoute
    }
    '/team/$teamname': {
      id: '/team/$teamname'
      path: '/$teamname'
      fullPath: '/team/$teamname'
      preLoaderRoute: typeof TeamTeamnameImport
      parentRoute: typeof TeamImport
    }
  }
}

// Create and export the route tree

interface ProfileRouteChildren {
  ProfileUsernameRoute: typeof ProfileUsernameRoute
}

const ProfileRouteChildren: ProfileRouteChildren = {
  ProfileUsernameRoute: ProfileUsernameRoute,
}

const ProfileRouteWithChildren =
  ProfileRoute._addFileChildren(ProfileRouteChildren)

interface TeamRouteChildren {
  TeamTeamnameRoute: typeof TeamTeamnameRoute
}

const TeamRouteChildren: TeamRouteChildren = {
  TeamTeamnameRoute: TeamTeamnameRoute,
}

const TeamRouteWithChildren = TeamRoute._addFileChildren(TeamRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/profile': typeof ProfileRouteWithChildren
  '/rules': typeof RulesRoute
  '/team': typeof TeamRouteWithChildren
  '/challenges': typeof ChallengesLazyRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset': typeof AuthResetRoute
  '/profile/$username': typeof ProfileUsernameRoute
  '/scoreboard/player': typeof ScoreboardPlayerRoute
  '/scoreboard/team': typeof ScoreboardTeamRoute
  '/team/$teamname': typeof TeamTeamnameRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/profile': typeof ProfileRouteWithChildren
  '/rules': typeof RulesRoute
  '/team': typeof TeamRouteWithChildren
  '/challenges': typeof ChallengesLazyRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset': typeof AuthResetRoute
  '/profile/$username': typeof ProfileUsernameRoute
  '/scoreboard/player': typeof ScoreboardPlayerRoute
  '/scoreboard/team': typeof ScoreboardTeamRoute
  '/team/$teamname': typeof TeamTeamnameRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/profile': typeof ProfileRouteWithChildren
  '/rules': typeof RulesRoute
  '/team': typeof TeamRouteWithChildren
  '/challenges': typeof ChallengesLazyRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset': typeof AuthResetRoute
  '/profile/$username': typeof ProfileUsernameRoute
  '/scoreboard/player': typeof ScoreboardPlayerRoute
  '/scoreboard/team': typeof ScoreboardTeamRoute
  '/team/$teamname': typeof TeamTeamnameRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/profile'
    | '/rules'
    | '/team'
    | '/challenges'
    | '/auth/login'
    | '/auth/logout'
    | '/auth/register'
    | '/auth/reset'
    | '/profile/$username'
    | '/scoreboard/player'
    | '/scoreboard/team'
    | '/team/$teamname'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/profile'
    | '/rules'
    | '/team'
    | '/challenges'
    | '/auth/login'
    | '/auth/logout'
    | '/auth/register'
    | '/auth/reset'
    | '/profile/$username'
    | '/scoreboard/player'
    | '/scoreboard/team'
    | '/team/$teamname'
  id:
    | '__root__'
    | '/'
    | '/profile'
    | '/rules'
    | '/team'
    | '/challenges'
    | '/auth/login'
    | '/auth/logout'
    | '/auth/register'
    | '/auth/reset'
    | '/profile/$username'
    | '/scoreboard/player'
    | '/scoreboard/team'
    | '/team/$teamname'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ProfileRoute: typeof ProfileRouteWithChildren
  RulesRoute: typeof RulesRoute
  TeamRoute: typeof TeamRouteWithChildren
  ChallengesLazyRoute: typeof ChallengesLazyRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthLogoutRoute: typeof AuthLogoutRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthResetRoute: typeof AuthResetRoute
  ScoreboardPlayerRoute: typeof ScoreboardPlayerRoute
  ScoreboardTeamRoute: typeof ScoreboardTeamRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ProfileRoute: ProfileRouteWithChildren,
  RulesRoute: RulesRoute,
  TeamRoute: TeamRouteWithChildren,
  ChallengesLazyRoute: ChallengesLazyRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthLogoutRoute: AuthLogoutRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthResetRoute: AuthResetRoute,
  ScoreboardPlayerRoute: ScoreboardPlayerRoute,
  ScoreboardTeamRoute: ScoreboardTeamRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/profile",
        "/rules",
        "/team",
        "/challenges",
        "/auth/login",
        "/auth/logout",
        "/auth/register",
        "/auth/reset",
        "/scoreboard/player",
        "/scoreboard/team"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx",
      "children": [
        "/profile/$username"
      ]
    },
    "/rules": {
      "filePath": "rules.tsx"
    },
    "/team": {
      "filePath": "team.tsx",
      "children": [
        "/team/$teamname"
      ]
    },
    "/challenges": {
      "filePath": "challenges.lazy.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/logout": {
      "filePath": "auth/logout.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/auth/reset": {
      "filePath": "auth/reset.tsx"
    },
    "/profile/$username": {
      "filePath": "profile/$username.tsx",
      "parent": "/profile"
    },
    "/scoreboard/player": {
      "filePath": "scoreboard/player.tsx"
    },
    "/scoreboard/team": {
      "filePath": "scoreboard/team.tsx"
    },
    "/team/$teamname": {
      "filePath": "team/$teamname.tsx",
      "parent": "/team"
    }
  }
}
ROUTE_MANIFEST_END */
