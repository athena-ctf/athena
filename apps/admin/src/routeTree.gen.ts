/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TableUnlockImport } from './routes/table/unlock'
import { Route as TableTicketImport } from './routes/table/ticket'
import { Route as TableTeamImport } from './routes/table/team'
import { Route as TableSubmissionImport } from './routes/table/submission'
import { Route as TablePlayerawardImport } from './routes/table/player_award'
import { Route as TablePlayerImport } from './routes/table/player'
import { Route as TableNotificationImport } from './routes/table/notification'
import { Route as TableInviteImport } from './routes/table/invite'
import { Route as TableInstanceImport } from './routes/table/instance'
import { Route as TableHintImport } from './routes/table/hint'
import { Route as TableFlagImport } from './routes/table/flag'
import { Route as TableFileImport } from './routes/table/file'
import { Route as TableDeploymentImport } from './routes/table/deployment'
import { Route as TableContainerImport } from './routes/table/container'
import { Route as TableChallengefileImport } from './routes/table/challenge_file'
import { Route as TableChallengeImport } from './routes/table/challenge'
import { Route as TableBanImport } from './routes/table/ban'
import { Route as TableAwardImport } from './routes/table/award'
import { Route as TableAdminImport } from './routes/table/admin'
import { Route as RbacRolesImport } from './routes/rbac/roles'
import { Route as RbacOverridesImport } from './routes/rbac/overrides'
import { Route as MailTrashImport } from './routes/mail/trash'
import { Route as MailSpamImport } from './routes/mail/spam'
import { Route as MailSentImport } from './routes/mail/sent'
import { Route as MailInboxImport } from './routes/mail/inbox'
import { Route as DockerVolumesImport } from './routes/docker/volumes'
import { Route as DockerNetworksImport } from './routes/docker/networks'
import { Route as DockerImagesImport } from './routes/docker/images'
import { Route as DockerContainersImport } from './routes/docker/containers'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TableUnlockRoute = TableUnlockImport.update({
  id: '/table/unlock',
  path: '/table/unlock',
  getParentRoute: () => rootRoute,
} as any)

const TableTicketRoute = TableTicketImport.update({
  id: '/table/ticket',
  path: '/table/ticket',
  getParentRoute: () => rootRoute,
} as any)

const TableTeamRoute = TableTeamImport.update({
  id: '/table/team',
  path: '/table/team',
  getParentRoute: () => rootRoute,
} as any)

const TableSubmissionRoute = TableSubmissionImport.update({
  id: '/table/submission',
  path: '/table/submission',
  getParentRoute: () => rootRoute,
} as any)

const TablePlayerawardRoute = TablePlayerawardImport.update({
  id: '/table/player_award',
  path: '/table/player_award',
  getParentRoute: () => rootRoute,
} as any)

const TablePlayerRoute = TablePlayerImport.update({
  id: '/table/player',
  path: '/table/player',
  getParentRoute: () => rootRoute,
} as any)

const TableNotificationRoute = TableNotificationImport.update({
  id: '/table/notification',
  path: '/table/notification',
  getParentRoute: () => rootRoute,
} as any)

const TableInviteRoute = TableInviteImport.update({
  id: '/table/invite',
  path: '/table/invite',
  getParentRoute: () => rootRoute,
} as any)

const TableInstanceRoute = TableInstanceImport.update({
  id: '/table/instance',
  path: '/table/instance',
  getParentRoute: () => rootRoute,
} as any)

const TableHintRoute = TableHintImport.update({
  id: '/table/hint',
  path: '/table/hint',
  getParentRoute: () => rootRoute,
} as any)

const TableFlagRoute = TableFlagImport.update({
  id: '/table/flag',
  path: '/table/flag',
  getParentRoute: () => rootRoute,
} as any)

const TableFileRoute = TableFileImport.update({
  id: '/table/file',
  path: '/table/file',
  getParentRoute: () => rootRoute,
} as any)

const TableDeploymentRoute = TableDeploymentImport.update({
  id: '/table/deployment',
  path: '/table/deployment',
  getParentRoute: () => rootRoute,
} as any)

const TableContainerRoute = TableContainerImport.update({
  id: '/table/container',
  path: '/table/container',
  getParentRoute: () => rootRoute,
} as any)

const TableChallengefileRoute = TableChallengefileImport.update({
  id: '/table/challenge_file',
  path: '/table/challenge_file',
  getParentRoute: () => rootRoute,
} as any)

const TableChallengeRoute = TableChallengeImport.update({
  id: '/table/challenge',
  path: '/table/challenge',
  getParentRoute: () => rootRoute,
} as any)

const TableBanRoute = TableBanImport.update({
  id: '/table/ban',
  path: '/table/ban',
  getParentRoute: () => rootRoute,
} as any)

const TableAwardRoute = TableAwardImport.update({
  id: '/table/award',
  path: '/table/award',
  getParentRoute: () => rootRoute,
} as any)

const TableAdminRoute = TableAdminImport.update({
  id: '/table/admin',
  path: '/table/admin',
  getParentRoute: () => rootRoute,
} as any)

const RbacRolesRoute = RbacRolesImport.update({
  id: '/rbac/roles',
  path: '/rbac/roles',
  getParentRoute: () => rootRoute,
} as any)

const RbacOverridesRoute = RbacOverridesImport.update({
  id: '/rbac/overrides',
  path: '/rbac/overrides',
  getParentRoute: () => rootRoute,
} as any)

const MailTrashRoute = MailTrashImport.update({
  id: '/mail/trash',
  path: '/mail/trash',
  getParentRoute: () => rootRoute,
} as any)

const MailSpamRoute = MailSpamImport.update({
  id: '/mail/spam',
  path: '/mail/spam',
  getParentRoute: () => rootRoute,
} as any)

const MailSentRoute = MailSentImport.update({
  id: '/mail/sent',
  path: '/mail/sent',
  getParentRoute: () => rootRoute,
} as any)

const MailInboxRoute = MailInboxImport.update({
  id: '/mail/inbox',
  path: '/mail/inbox',
  getParentRoute: () => rootRoute,
} as any)

const DockerVolumesRoute = DockerVolumesImport.update({
  id: '/docker/volumes',
  path: '/docker/volumes',
  getParentRoute: () => rootRoute,
} as any)

const DockerNetworksRoute = DockerNetworksImport.update({
  id: '/docker/networks',
  path: '/docker/networks',
  getParentRoute: () => rootRoute,
} as any)

const DockerImagesRoute = DockerImagesImport.update({
  id: '/docker/images',
  path: '/docker/images',
  getParentRoute: () => rootRoute,
} as any)

const DockerContainersRoute = DockerContainersImport.update({
  id: '/docker/containers',
  path: '/docker/containers',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/docker/containers': {
      id: '/docker/containers'
      path: '/docker/containers'
      fullPath: '/docker/containers'
      preLoaderRoute: typeof DockerContainersImport
      parentRoute: typeof rootRoute
    }
    '/docker/images': {
      id: '/docker/images'
      path: '/docker/images'
      fullPath: '/docker/images'
      preLoaderRoute: typeof DockerImagesImport
      parentRoute: typeof rootRoute
    }
    '/docker/networks': {
      id: '/docker/networks'
      path: '/docker/networks'
      fullPath: '/docker/networks'
      preLoaderRoute: typeof DockerNetworksImport
      parentRoute: typeof rootRoute
    }
    '/docker/volumes': {
      id: '/docker/volumes'
      path: '/docker/volumes'
      fullPath: '/docker/volumes'
      preLoaderRoute: typeof DockerVolumesImport
      parentRoute: typeof rootRoute
    }
    '/mail/inbox': {
      id: '/mail/inbox'
      path: '/mail/inbox'
      fullPath: '/mail/inbox'
      preLoaderRoute: typeof MailInboxImport
      parentRoute: typeof rootRoute
    }
    '/mail/sent': {
      id: '/mail/sent'
      path: '/mail/sent'
      fullPath: '/mail/sent'
      preLoaderRoute: typeof MailSentImport
      parentRoute: typeof rootRoute
    }
    '/mail/spam': {
      id: '/mail/spam'
      path: '/mail/spam'
      fullPath: '/mail/spam'
      preLoaderRoute: typeof MailSpamImport
      parentRoute: typeof rootRoute
    }
    '/mail/trash': {
      id: '/mail/trash'
      path: '/mail/trash'
      fullPath: '/mail/trash'
      preLoaderRoute: typeof MailTrashImport
      parentRoute: typeof rootRoute
    }
    '/rbac/overrides': {
      id: '/rbac/overrides'
      path: '/rbac/overrides'
      fullPath: '/rbac/overrides'
      preLoaderRoute: typeof RbacOverridesImport
      parentRoute: typeof rootRoute
    }
    '/rbac/roles': {
      id: '/rbac/roles'
      path: '/rbac/roles'
      fullPath: '/rbac/roles'
      preLoaderRoute: typeof RbacRolesImport
      parentRoute: typeof rootRoute
    }
    '/table/admin': {
      id: '/table/admin'
      path: '/table/admin'
      fullPath: '/table/admin'
      preLoaderRoute: typeof TableAdminImport
      parentRoute: typeof rootRoute
    }
    '/table/award': {
      id: '/table/award'
      path: '/table/award'
      fullPath: '/table/award'
      preLoaderRoute: typeof TableAwardImport
      parentRoute: typeof rootRoute
    }
    '/table/ban': {
      id: '/table/ban'
      path: '/table/ban'
      fullPath: '/table/ban'
      preLoaderRoute: typeof TableBanImport
      parentRoute: typeof rootRoute
    }
    '/table/challenge': {
      id: '/table/challenge'
      path: '/table/challenge'
      fullPath: '/table/challenge'
      preLoaderRoute: typeof TableChallengeImport
      parentRoute: typeof rootRoute
    }
    '/table/challenge_file': {
      id: '/table/challenge_file'
      path: '/table/challenge_file'
      fullPath: '/table/challenge_file'
      preLoaderRoute: typeof TableChallengefileImport
      parentRoute: typeof rootRoute
    }
    '/table/container': {
      id: '/table/container'
      path: '/table/container'
      fullPath: '/table/container'
      preLoaderRoute: typeof TableContainerImport
      parentRoute: typeof rootRoute
    }
    '/table/deployment': {
      id: '/table/deployment'
      path: '/table/deployment'
      fullPath: '/table/deployment'
      preLoaderRoute: typeof TableDeploymentImport
      parentRoute: typeof rootRoute
    }
    '/table/file': {
      id: '/table/file'
      path: '/table/file'
      fullPath: '/table/file'
      preLoaderRoute: typeof TableFileImport
      parentRoute: typeof rootRoute
    }
    '/table/flag': {
      id: '/table/flag'
      path: '/table/flag'
      fullPath: '/table/flag'
      preLoaderRoute: typeof TableFlagImport
      parentRoute: typeof rootRoute
    }
    '/table/hint': {
      id: '/table/hint'
      path: '/table/hint'
      fullPath: '/table/hint'
      preLoaderRoute: typeof TableHintImport
      parentRoute: typeof rootRoute
    }
    '/table/instance': {
      id: '/table/instance'
      path: '/table/instance'
      fullPath: '/table/instance'
      preLoaderRoute: typeof TableInstanceImport
      parentRoute: typeof rootRoute
    }
    '/table/invite': {
      id: '/table/invite'
      path: '/table/invite'
      fullPath: '/table/invite'
      preLoaderRoute: typeof TableInviteImport
      parentRoute: typeof rootRoute
    }
    '/table/notification': {
      id: '/table/notification'
      path: '/table/notification'
      fullPath: '/table/notification'
      preLoaderRoute: typeof TableNotificationImport
      parentRoute: typeof rootRoute
    }
    '/table/player': {
      id: '/table/player'
      path: '/table/player'
      fullPath: '/table/player'
      preLoaderRoute: typeof TablePlayerImport
      parentRoute: typeof rootRoute
    }
    '/table/player_award': {
      id: '/table/player_award'
      path: '/table/player_award'
      fullPath: '/table/player_award'
      preLoaderRoute: typeof TablePlayerawardImport
      parentRoute: typeof rootRoute
    }
    '/table/submission': {
      id: '/table/submission'
      path: '/table/submission'
      fullPath: '/table/submission'
      preLoaderRoute: typeof TableSubmissionImport
      parentRoute: typeof rootRoute
    }
    '/table/team': {
      id: '/table/team'
      path: '/table/team'
      fullPath: '/table/team'
      preLoaderRoute: typeof TableTeamImport
      parentRoute: typeof rootRoute
    }
    '/table/ticket': {
      id: '/table/ticket'
      path: '/table/ticket'
      fullPath: '/table/ticket'
      preLoaderRoute: typeof TableTicketImport
      parentRoute: typeof rootRoute
    }
    '/table/unlock': {
      id: '/table/unlock'
      path: '/table/unlock'
      fullPath: '/table/unlock'
      preLoaderRoute: typeof TableUnlockImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/docker/containers': typeof DockerContainersRoute
  '/docker/images': typeof DockerImagesRoute
  '/docker/networks': typeof DockerNetworksRoute
  '/docker/volumes': typeof DockerVolumesRoute
  '/mail/inbox': typeof MailInboxRoute
  '/mail/sent': typeof MailSentRoute
  '/mail/spam': typeof MailSpamRoute
  '/mail/trash': typeof MailTrashRoute
  '/rbac/overrides': typeof RbacOverridesRoute
  '/rbac/roles': typeof RbacRolesRoute
  '/table/admin': typeof TableAdminRoute
  '/table/award': typeof TableAwardRoute
  '/table/ban': typeof TableBanRoute
  '/table/challenge': typeof TableChallengeRoute
  '/table/challenge_file': typeof TableChallengefileRoute
  '/table/container': typeof TableContainerRoute
  '/table/deployment': typeof TableDeploymentRoute
  '/table/file': typeof TableFileRoute
  '/table/flag': typeof TableFlagRoute
  '/table/hint': typeof TableHintRoute
  '/table/instance': typeof TableInstanceRoute
  '/table/invite': typeof TableInviteRoute
  '/table/notification': typeof TableNotificationRoute
  '/table/player': typeof TablePlayerRoute
  '/table/player_award': typeof TablePlayerawardRoute
  '/table/submission': typeof TableSubmissionRoute
  '/table/team': typeof TableTeamRoute
  '/table/ticket': typeof TableTicketRoute
  '/table/unlock': typeof TableUnlockRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/docker/containers': typeof DockerContainersRoute
  '/docker/images': typeof DockerImagesRoute
  '/docker/networks': typeof DockerNetworksRoute
  '/docker/volumes': typeof DockerVolumesRoute
  '/mail/inbox': typeof MailInboxRoute
  '/mail/sent': typeof MailSentRoute
  '/mail/spam': typeof MailSpamRoute
  '/mail/trash': typeof MailTrashRoute
  '/rbac/overrides': typeof RbacOverridesRoute
  '/rbac/roles': typeof RbacRolesRoute
  '/table/admin': typeof TableAdminRoute
  '/table/award': typeof TableAwardRoute
  '/table/ban': typeof TableBanRoute
  '/table/challenge': typeof TableChallengeRoute
  '/table/challenge_file': typeof TableChallengefileRoute
  '/table/container': typeof TableContainerRoute
  '/table/deployment': typeof TableDeploymentRoute
  '/table/file': typeof TableFileRoute
  '/table/flag': typeof TableFlagRoute
  '/table/hint': typeof TableHintRoute
  '/table/instance': typeof TableInstanceRoute
  '/table/invite': typeof TableInviteRoute
  '/table/notification': typeof TableNotificationRoute
  '/table/player': typeof TablePlayerRoute
  '/table/player_award': typeof TablePlayerawardRoute
  '/table/submission': typeof TableSubmissionRoute
  '/table/team': typeof TableTeamRoute
  '/table/ticket': typeof TableTicketRoute
  '/table/unlock': typeof TableUnlockRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/docker/containers': typeof DockerContainersRoute
  '/docker/images': typeof DockerImagesRoute
  '/docker/networks': typeof DockerNetworksRoute
  '/docker/volumes': typeof DockerVolumesRoute
  '/mail/inbox': typeof MailInboxRoute
  '/mail/sent': typeof MailSentRoute
  '/mail/spam': typeof MailSpamRoute
  '/mail/trash': typeof MailTrashRoute
  '/rbac/overrides': typeof RbacOverridesRoute
  '/rbac/roles': typeof RbacRolesRoute
  '/table/admin': typeof TableAdminRoute
  '/table/award': typeof TableAwardRoute
  '/table/ban': typeof TableBanRoute
  '/table/challenge': typeof TableChallengeRoute
  '/table/challenge_file': typeof TableChallengefileRoute
  '/table/container': typeof TableContainerRoute
  '/table/deployment': typeof TableDeploymentRoute
  '/table/file': typeof TableFileRoute
  '/table/flag': typeof TableFlagRoute
  '/table/hint': typeof TableHintRoute
  '/table/instance': typeof TableInstanceRoute
  '/table/invite': typeof TableInviteRoute
  '/table/notification': typeof TableNotificationRoute
  '/table/player': typeof TablePlayerRoute
  '/table/player_award': typeof TablePlayerawardRoute
  '/table/submission': typeof TableSubmissionRoute
  '/table/team': typeof TableTeamRoute
  '/table/ticket': typeof TableTicketRoute
  '/table/unlock': typeof TableUnlockRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/docker/containers'
    | '/docker/images'
    | '/docker/networks'
    | '/docker/volumes'
    | '/mail/inbox'
    | '/mail/sent'
    | '/mail/spam'
    | '/mail/trash'
    | '/rbac/overrides'
    | '/rbac/roles'
    | '/table/admin'
    | '/table/award'
    | '/table/ban'
    | '/table/challenge'
    | '/table/challenge_file'
    | '/table/container'
    | '/table/deployment'
    | '/table/file'
    | '/table/flag'
    | '/table/hint'
    | '/table/instance'
    | '/table/invite'
    | '/table/notification'
    | '/table/player'
    | '/table/player_award'
    | '/table/submission'
    | '/table/team'
    | '/table/ticket'
    | '/table/unlock'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/docker/containers'
    | '/docker/images'
    | '/docker/networks'
    | '/docker/volumes'
    | '/mail/inbox'
    | '/mail/sent'
    | '/mail/spam'
    | '/mail/trash'
    | '/rbac/overrides'
    | '/rbac/roles'
    | '/table/admin'
    | '/table/award'
    | '/table/ban'
    | '/table/challenge'
    | '/table/challenge_file'
    | '/table/container'
    | '/table/deployment'
    | '/table/file'
    | '/table/flag'
    | '/table/hint'
    | '/table/instance'
    | '/table/invite'
    | '/table/notification'
    | '/table/player'
    | '/table/player_award'
    | '/table/submission'
    | '/table/team'
    | '/table/ticket'
    | '/table/unlock'
  id:
    | '__root__'
    | '/'
    | '/docker/containers'
    | '/docker/images'
    | '/docker/networks'
    | '/docker/volumes'
    | '/mail/inbox'
    | '/mail/sent'
    | '/mail/spam'
    | '/mail/trash'
    | '/rbac/overrides'
    | '/rbac/roles'
    | '/table/admin'
    | '/table/award'
    | '/table/ban'
    | '/table/challenge'
    | '/table/challenge_file'
    | '/table/container'
    | '/table/deployment'
    | '/table/file'
    | '/table/flag'
    | '/table/hint'
    | '/table/instance'
    | '/table/invite'
    | '/table/notification'
    | '/table/player'
    | '/table/player_award'
    | '/table/submission'
    | '/table/team'
    | '/table/ticket'
    | '/table/unlock'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DockerContainersRoute: typeof DockerContainersRoute
  DockerImagesRoute: typeof DockerImagesRoute
  DockerNetworksRoute: typeof DockerNetworksRoute
  DockerVolumesRoute: typeof DockerVolumesRoute
  MailInboxRoute: typeof MailInboxRoute
  MailSentRoute: typeof MailSentRoute
  MailSpamRoute: typeof MailSpamRoute
  MailTrashRoute: typeof MailTrashRoute
  RbacOverridesRoute: typeof RbacOverridesRoute
  RbacRolesRoute: typeof RbacRolesRoute
  TableAdminRoute: typeof TableAdminRoute
  TableAwardRoute: typeof TableAwardRoute
  TableBanRoute: typeof TableBanRoute
  TableChallengeRoute: typeof TableChallengeRoute
  TableChallengefileRoute: typeof TableChallengefileRoute
  TableContainerRoute: typeof TableContainerRoute
  TableDeploymentRoute: typeof TableDeploymentRoute
  TableFileRoute: typeof TableFileRoute
  TableFlagRoute: typeof TableFlagRoute
  TableHintRoute: typeof TableHintRoute
  TableInstanceRoute: typeof TableInstanceRoute
  TableInviteRoute: typeof TableInviteRoute
  TableNotificationRoute: typeof TableNotificationRoute
  TablePlayerRoute: typeof TablePlayerRoute
  TablePlayerawardRoute: typeof TablePlayerawardRoute
  TableSubmissionRoute: typeof TableSubmissionRoute
  TableTeamRoute: typeof TableTeamRoute
  TableTicketRoute: typeof TableTicketRoute
  TableUnlockRoute: typeof TableUnlockRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DockerContainersRoute: DockerContainersRoute,
  DockerImagesRoute: DockerImagesRoute,
  DockerNetworksRoute: DockerNetworksRoute,
  DockerVolumesRoute: DockerVolumesRoute,
  MailInboxRoute: MailInboxRoute,
  MailSentRoute: MailSentRoute,
  MailSpamRoute: MailSpamRoute,
  MailTrashRoute: MailTrashRoute,
  RbacOverridesRoute: RbacOverridesRoute,
  RbacRolesRoute: RbacRolesRoute,
  TableAdminRoute: TableAdminRoute,
  TableAwardRoute: TableAwardRoute,
  TableBanRoute: TableBanRoute,
  TableChallengeRoute: TableChallengeRoute,
  TableChallengefileRoute: TableChallengefileRoute,
  TableContainerRoute: TableContainerRoute,
  TableDeploymentRoute: TableDeploymentRoute,
  TableFileRoute: TableFileRoute,
  TableFlagRoute: TableFlagRoute,
  TableHintRoute: TableHintRoute,
  TableInstanceRoute: TableInstanceRoute,
  TableInviteRoute: TableInviteRoute,
  TableNotificationRoute: TableNotificationRoute,
  TablePlayerRoute: TablePlayerRoute,
  TablePlayerawardRoute: TablePlayerawardRoute,
  TableSubmissionRoute: TableSubmissionRoute,
  TableTeamRoute: TableTeamRoute,
  TableTicketRoute: TableTicketRoute,
  TableUnlockRoute: TableUnlockRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/docker/containers",
        "/docker/images",
        "/docker/networks",
        "/docker/volumes",
        "/mail/inbox",
        "/mail/sent",
        "/mail/spam",
        "/mail/trash",
        "/rbac/overrides",
        "/rbac/roles",
        "/table/admin",
        "/table/award",
        "/table/ban",
        "/table/challenge",
        "/table/challenge_file",
        "/table/container",
        "/table/deployment",
        "/table/file",
        "/table/flag",
        "/table/hint",
        "/table/instance",
        "/table/invite",
        "/table/notification",
        "/table/player",
        "/table/player_award",
        "/table/submission",
        "/table/team",
        "/table/ticket",
        "/table/unlock"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/docker/containers": {
      "filePath": "docker/containers.tsx"
    },
    "/docker/images": {
      "filePath": "docker/images.tsx"
    },
    "/docker/networks": {
      "filePath": "docker/networks.tsx"
    },
    "/docker/volumes": {
      "filePath": "docker/volumes.tsx"
    },
    "/mail/inbox": {
      "filePath": "mail/inbox.tsx"
    },
    "/mail/sent": {
      "filePath": "mail/sent.tsx"
    },
    "/mail/spam": {
      "filePath": "mail/spam.tsx"
    },
    "/mail/trash": {
      "filePath": "mail/trash.tsx"
    },
    "/rbac/overrides": {
      "filePath": "rbac/overrides.tsx"
    },
    "/rbac/roles": {
      "filePath": "rbac/roles.tsx"
    },
    "/table/admin": {
      "filePath": "table/admin.tsx"
    },
    "/table/award": {
      "filePath": "table/award.tsx"
    },
    "/table/ban": {
      "filePath": "table/ban.tsx"
    },
    "/table/challenge": {
      "filePath": "table/challenge.tsx"
    },
    "/table/challenge_file": {
      "filePath": "table/challenge_file.tsx"
    },
    "/table/container": {
      "filePath": "table/container.tsx"
    },
    "/table/deployment": {
      "filePath": "table/deployment.tsx"
    },
    "/table/file": {
      "filePath": "table/file.tsx"
    },
    "/table/flag": {
      "filePath": "table/flag.tsx"
    },
    "/table/hint": {
      "filePath": "table/hint.tsx"
    },
    "/table/instance": {
      "filePath": "table/instance.tsx"
    },
    "/table/invite": {
      "filePath": "table/invite.tsx"
    },
    "/table/notification": {
      "filePath": "table/notification.tsx"
    },
    "/table/player": {
      "filePath": "table/player.tsx"
    },
    "/table/player_award": {
      "filePath": "table/player_award.tsx"
    },
    "/table/submission": {
      "filePath": "table/submission.tsx"
    },
    "/table/team": {
      "filePath": "table/team.tsx"
    },
    "/table/ticket": {
      "filePath": "table/ticket.tsx"
    },
    "/table/unlock": {
      "filePath": "table/unlock.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
